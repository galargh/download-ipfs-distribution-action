name: 'Download IPFS Distribution'
description: 'Download executable from dist.ipfs.io'
inputs:
  name:
    description: 'Name of the distribution to download'
    required: true
    default: 'go-ipfs'
  version:
    description: 'Version of the distribution to download(defaults to latest stable version)'
    required: false
  working-directory:
    description: "Directory where the action is going to be performed(defaults to current directory)"
    required: false
  install-directory:
    description: "Directory where the executable is going to be copied(defaults to /usr/local/bin or /usr/bin on windows)"
    required: false
outputs:
  executable:
    description: "The name of the executable"
    value: ${{ steps.copy.outputs.executable }}
  executables:
    description: "The names of all the executables"
    value: ${{ steps.copy.outputs.executables }}
runs:
  using: "composite"
  steps:
    - run: mkdir "${{ inputs.name }}"
      shell: bash
      working-directory: ${{ inputs.working-directory }}
    - id: system
      run: |
        OS="$(echo ${{ runner.os }} | tr '[:upper:]' '[:lower:]')"
        ARCH="$(echo ${{ runner.arch }} | tr '[:upper:]' '[:lower:]')"
        case "$OS" in
          macos) OS="darwin" ;;
        esac
        case "$ARCH" in
          x86) ARCH="386" ;;
          x64) ARCH="amd64" ;;
        esac
        echo "os=$OS"
        echo "arch=$ARCH"
        echo "::set-output name=os::$OS"
        echo "::set-output name=arch::$ARCH"
      shell: bash
      working-directory: ${{ inputs.working-directory }}
    - id: inputs
      run: |
        VERSION="${{ inputs.version }}"
        INSTALL_DIRECTORY="${{ inputs.install-directory }}"
        if [ -z "$VERSION" ]; then
          curl --retry 5 --no-progress-meter --output "${{ inputs.name }}/versions" "https://dist.ipfs.io/${{ inputs.name }}/versions"
          VERSION="$(grep -v rc "${{ inputs.name }}/versions" | tail -n 1)"
        fi
        if [ -z "$INSTALL_DIRECTORY" ]; then
          if [ "${{ steps.system.outputs.os }}" == "windows" ]; then
            INSTALL_DIRECTORY="/usr/bin"
          else
            INSTALL_DIRECTORY="/usr/local/bin"
          fi
        fi
        echo "version=$VERSION"
        echo "install-directory=$INSTALL_DIRECTORY"
        echo "::set-output name=version::$VERSION"
        echo "::set-output name=install-directory::$INSTALL_DIRECTORY"
      shell: bash
      working-directory: ${{ inputs.working-directory }}
    - id: dist
      run: |
        curl --retry 5 --no-progress-meter --output "${{ inputs.name }}/dist.json" "https://dist.ipfs.io/${{ inputs.name }}/${{ steps.inputs.outputs.version }}/dist.json"
        LINK="$(jq -r '.platforms.${{ steps.system.outputs.os }}.archs.${{ steps.system.outputs.arch }}.link | values' "${{ inputs.name }}/dist.json")"
        ARCHIVE="$(basename "$LINK")"
        SHA512="$(jq -r '.platforms.${{ steps.system.outputs.os }}.archs.${{ steps.system.outputs.arch }}.sha512 | values' "${{ inputs.name }}/dist.json")"
        echo "link=$LINK"
        echo "archive=$ARCHIVE"
        echo "sha512=$SHA512"
        echo "::set-output name=link::$LINK"
        echo "::set-output name=archive::$ARCHIVE"
        echo "::set-output name=sha512::$SHA512"
      shell: bash
      working-directory: ${{ inputs.working-directory }}
    - run: curl --retry 5 --no-progress-meter --output "${{ steps.dist.outputs.archive }}" "https://dist.ipfs.io/${{ inputs.name }}/${{ steps.inputs.outputs.version }}${{ steps.dist.outputs.link }}"
      shell: bash
      working-directory: ${{ inputs.working-directory }}
    - if: ${{ steps.dist.outputs.sha512 != '' }}
      run: |
        CMD="sha512sum"
        if [ "${{ runner.os }}" == "macOS" ]; then
          CMD="shasum --algorithm 512"
        fi
        echo "${{ steps.dist.outputs.sha512 }}  ${{ steps.dist.outputs.archive }}" | $CMD --check
      shell: bash
      working-directory: ${{ inputs.working-directory }}
    - run: |
        case "${{ steps.dist.outputs.archive }}" in
          *.tar.gz) tar -zxf "${{ steps.dist.outputs.archive }}" ;;
          *.zip) unzip "${{ steps.dist.outputs.archive }}" ;;
        esac
      shell: bash
      working-directory: ${{ inputs.working-directory }}
    - id: copy
      run: |
        EXECUTABLES=()
        for executable in $(find ${{ inputs.name }} -type f -perm -111 ! -name "*.sh"); do
          cp "$executable" "${{ steps.inputs.outputs.install-directory }}/$EXECUTABLE"
          EXECUTABLES+=("$(basename $executable)")
        done
        EXECUTABLE="${EXECUTABLES[0]}"
        EXECUTABLES="$(jq -nc '$ARGS.positional' --args ${EXECUTABLES[@]})"
        echo "executable=$EXECUTABLE"
        echo "executables=$EXECUTABLES"
        echo "::set-output name=executable::$EXECUTABLE"
        echo "::set-output name=executables::$EXECUTABLES"
      shell: bash
      working-directory: ${{ inputs.working-directory }}
    - if: ${{ always() }}
      run: |
        rm -r "${{ inputs.name }}"
        rm "${{ steps.dist.outputs.archive }}"
      shell: bash
      working-directory: ${{ inputs.working-directory }}
